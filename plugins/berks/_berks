#compdef berks
#autoload

# berks zsh completion

local -a _1st_arguments
_1st_arguments=(
    'apply:apply ENVIRONMENT     # Apply the cookbook version locks from Berksfile.lock to a Chef environment'
    'configure:configure             # Create a new Berkshelf configuration file'
    'contingent:contingent COOKBOOK   # List all cookbooks that depend on the given cookbook'
    'cookbook:cookbook NAME         # Create a skeleton for a new cookbook'
    'help:help [COMMAND]        # Describe available commands or one specific command'
    'init:init [PATH]           # Initialize Berkshelf in the given directory'
    'install:install               # Install the cookbooks specified in the Berksfile'
    'list:list                  # List all cookbooks (and dependencies) specified in the Berksfile'
    'outdated:outdated [COOKBOOKS]  # Show outdated cookbooks (from the community site)'
    'package:package [COOKBOOK]    # Package a cookbook (and dependencies) as a tarball'
    'shelf:shelf SUBCOMMAND      # Interact with the cookbook store'
    'show:show [COOKBOOK]       # Display name, author, copyright, and dependency information about a cookbook'
    'update:update [COOKBOOKS]    # Update the cookbooks (and dependencies) specified in the Berksfile'
    'upload:upload [COOKBOOKS]    # Upload the cookbook specified in the Berksfile to the Chef Server'
    'version:version              # Display version and copyright information'
)

# local -a _box_arguments
# _box_arguments=(
#     'add:NAME URI Add a box to the system'
#     'help:COMMAND Describe subcommands or one specific subcommand'
#     'list:Lists all installed boxes'
#     'remove:NAME Remove a box from the system'
#     'repackage:NAME Repackage an installed box into a `.box` file.'
# )

# __task_list ()
# {
#     local expl
#     declare -a tasks

#     tasks=(box destroy halt init package provision reload resume ssh ssh-config status suspend up version)

#     _wanted tasks expl 'help' compadd $tasks
# }

# __box_list ()
# {
#     _wanted application expl 'command' compadd $(command ls -1 $HOME/.vagrant/boxes 2>/dev/null| sed -e 's/ /\\ /g')
# }

# __vm_list ()
# {
#     _wanted application expl 'command' compadd $(command grep Vagrantfile -oe '^[^#]*\.vm\.define *:\([a-zA-Z0-9]\+\)' 2>/dev/null | cut -d: -f2)
# }

# __vagrant-box ()
# {
#     local curcontext="$curcontext" state line
#     typeset -A opt_args

#     _arguments -C \
#         ':command:->command' \
#         '*::options:->options'

#    case $state in
#        (command)
#            _describe -t commands "gem subcommand" _box_arguments
#            return
#        ;;

#        (options)
#            case $line[1] in
#                (repackage|remove)
#                    _arguments ':feature:__box_list'
#                ;;
#            esac
#        ;;
#     esac
# }




local expl
local -a boxes installed_boxes

local curcontext="$curcontext" state line
typeset -A opt_args

_arguments -C \
    ':command:->command' \
    '*::options:->options'

case $state in
  (command)
      _describe -t commands "gem subcommand" _1st_arguments
      return
  ;;

  (options)
    case $line[1] in
      (help)
         _arguments ':feature:__task_list'
      ;;

      (box)
          __vagrant-box
      ;;
      (up|provision|package|destroy|reload|ssh|halt|resume|status)
  _arguments ':feature:__vm_list'
    esac
  ;;
esac
